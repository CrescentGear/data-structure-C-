#pragma warning(disable:4996)

#include <stdio.h>
#include <stdlib.h>

typedef struct AVLNode *AVLTree;
struct AVLNode {
	int Data;
	AVLTree Left;
	AVLTree Right;
	int Height;
};

AVLTree SingleLeftRotation(AVLTree A);
AVLTree SingleRightRotation(AVLTree A);
AVLTree DoubleLeftRightRotation(AVLTree A);
AVLTree DoubleRightLeftRotation(AVLTree A);
AVLTree Insert(AVLTree A, int x);
int GetHeight(AVLTree BT);
int Max(int a, int b);
int GetHeight(AVLTree A);


int main()
{
	int number;
	scanf("%d", &number);
	AVLTree T = NULL;

	for (int i = 0; i < number; i++)
	{
		int n;
		scanf(" %d", &n);
		T = Insert(T, n);
	}
	printf("%d", T->Data);
	return 0;
}
/* 你的代码将被嵌在这里 */

int GetHeight(AVLTree BT)
{
	int height;
	if (BT == NULL)
	{
		return 0;
	}
	else
	{
		height = GetHeight(BT->Left) > GetHeight(BT->Right) ? GetHeight(BT->Left) : GetHeight(BT->Right);
		return height + 1;
	}
}


AVLTree Insert(AVLTree A, int x)
{
	if (!A)
	{
		AVLTree A;
		A = (AVLTree)malloc(sizeof(struct AVLNode));
		A->Data = x;
		A->Left = NULL;
		A->Right = NULL;
		A->Height = 0;
		return A;
	}
	else
	{
		if (x < A->Data)
		{
			A->Left = Insert(A->Left, x);
			if (GetHeight(A->Left) - GetHeight(A->Right) == 2)
			{
				if (x < A->Left->Data)
				{
					A = SingleLeftRotation(A);
				}
				else
				{
					A = DoubleLeftRightRotation(A);
				}
			}
		}
		else
		{
			A->Right = Insert(A->Right, x);
			if (GetHeight(A->Left) - GetHeight(A->Right) == -2)
			{
				if (x > A->Right->Data)
				{
					A = SingleRightRotation(A);
				}
				else
				{
					A = DoubleRightLeftRotation(A);
				}
			}
		}
	}
	A->Height = Max(GetHeight(A->Left), GetHeight(A->Right)) + 1;
	return A;
}

int Max(int a, int b)
{
	return a > b ? a : b;
}

AVLTree SingleLeftRotation(AVLTree A)
{
	AVLTree B;
	B = A->Left;
	A->Left = B->Right;
	B->Right = A;

	A->Height = Max(GetHeight(A->Left), GetHeight(A->Right)) + 1;
	B->Height = Max(GetHeight(B->Left), A->Height) + 1;
	return B;
}

AVLTree SingleRightRotation(AVLTree A)
{
	AVLTree B;
	B = A->Right;
	A->Right = B->Left;
	B->Left = A;

	A->Height = Max(GetHeight(A->Left), GetHeight(A->Right)) + 1;
	B->Height = Max(GetHeight(B->Right), A->Height) + 1;

	return B;
}

AVLTree DoubleLeftRightRotation(AVLTree A)
{
	A->Left = SingleRightRotation(A->Left);
	return SingleLeftRotation(A);
}

AVLTree DoubleRightLeftRotation(AVLTree A)
{
	A->Right = SingleLeftRotation(A->Right);
	return SingleRightRotation(A);
}

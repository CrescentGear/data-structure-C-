/*未写完*/
#pragma warning(disable:4996)

#include <stdio.h>
#include <stdlib.h>

typedef struct AVLNode *AVLTree;
struct AVLNode {
	int Data;
	AVLTree Left;
	AVLTree Right;
	int Height;
};

AVLTree CreateAVLTree();
AVLTree SingleLeftRotation(AVLTree A);
AVLTree SingleRightRotation(AVLTree A);
AVLTree DoubleLeftRightRotation(AVLTree A);
AVLTree DoubleRightLeftRotation(AVLTree A);
AVLTree Insert(AVLTree A,int x);
int GetHeight(AVLTree BT);
int Max(int a,int b);
int GetHeight(AVLTree A);


int main()
{
	int N;
	AVLTree AVLT;
	scanf("%d",&N);
	AVLT = CreateAVLTree();
	for (int i=0;i<N-2;i++)
	{
		int number;
		scanf("%d",&number);
		AVLT = Insert(AVLT,number);
	}
	return 0;
}
/* 你的代码将被嵌在这里 */

int GetHeight(AVLTree BT)
{
	if (BT==NULL)
	{
		return 0;
	}
	if (BT->Left==NULL && BT->Right==NULL)
	{
		return 1;
	}
	if (BT->Right==NULL)
	{
		return 1 + GetHeight(BT->Left);
	}
	if (BT->Left== NULL)
	{
		return 1 + GetHeight(BT->Right);
	}
	return GetHeight(BT->Left) > GetHeight(BT->Right) ? GetHeight(BT->Left) +1:1+ GetHeight(BT->Right);
}

AVLTree CreateAVLTree()
{
	AVLTree AVLT,t,temp;
	AVLT = (AVLTree)malloc(sizeof(struct AVLNode));
	t = AVLT;
	temp = (AVLTree)malloc(sizeof(struct AVLNode));
	scanf(" %d %d",&t->Data,&temp->Data);
	if (temp->Data>t->Data) // temp is larger
	{
		t->Right = temp;
		t->Height++;
	}
	else                //temp is larger
	{
		t->Left = temp;
		t->Height++;
	}
	return AVLT;

}

AVLTree Insert(AVLTree A, int x)
{
	if (!A)
	{
		AVLTree A;
		A = (AVLTree)malloc(sizeof(struct AVLNode));
		A->Data = x;
		A->Left = NULL;
		A->Right = NULL;
		A->Height = 0;
	}
	else {
		if (x < A->Data)
		{
			A->Left = Insert(A->Left, x);
			if (x < A->Data)//need leftRo
			{
				A = SingleLeftRotation(A);
			}
			else
			{
				A = DoubleLeftRightRotation(A);
			}
		}
		else if (x > A->Data)
		{
			A->Right = Insert(A->Right, x);
		}
		A->Height++;
		return A;
	}
}

int Max(int a,int b)
{
	return a > b ? a : b;
}

AVLTree SingleLeftRotation(AVLTree A)
{
	AVLTree B;
	B = A->Left;
	A->Left = B->Right;
	B->Right = A;
	A->Height = GetHeight(A);
	B->Height = GetHeight(B) ;
	B->Height = Max(A->Height,B->Height)+1;
	return B;
}

AVLTree SingleRightRotation(AVLTree A)
{
	AVLTree B;
	B = A->Right;
	A->Right = B->Left;
	B->Left = A;
	A->Height = GetHeight(A);
	B->Height = GetHeight(B);
	B->Height = Max(A->Height, B->Height) + 1;
	return B;
}

AVLTree DoubleLeftRightRotation(AVLTree A)
{
	A->Left = SingleRightRotation(A->Left);
	return SingleLeftRotation(A);
}

AVLTree DoubleRightLeftRotation(AVLTree A)
{
	A->Right = SingleLeftRotation(A->Right);
	return SingleRightRotation(A);
}
